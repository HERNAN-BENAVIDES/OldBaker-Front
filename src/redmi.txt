// ===== src/app/core/auth/models/user.model.ts =====
export interface User {
  id?: string;
  name?: string;
  email: string;
  roles?: string[];
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface AuthResponse {
  token: string;
  user: User;
}

// ===== src/app/core/auth/services/auth.service.ts =====
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { map, tap, catchError } from 'rxjs/operators';
import { Router } from '@angular/router';
import { environment } from '../../../../environments/environment';
import { User, LoginCredentials, AuthResponse } from '../models/user.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private userSubject = new BehaviorSubject<User | null>(null);
  public user$ = this.userSubject.asObservable();

  constructor(
    private http: HttpClient,
    private router: Router
  ) {
    // Restaurar sesión si existe token
    this.restoreSession();
  }

  /**
   * Restaura la sesión del usuario desde localStorage
   */
  private restoreSession(): void {
    const token = this.getToken();
    const userStr = localStorage.getItem('user');
    if (token && userStr) {
      try {
        const user = JSON.parse(userStr);
        this.userSubject.next(user);
      } catch (e) {
        this.clearSession();
      }
    }
  }

  /**
   * Login con credenciales email/password
   */
  login(credentials: LoginCredentials): Observable<AuthResponse> {
    return this.http.post<AuthResponse>(`${environment.apiUrl}/api/auth/login`, credentials)
      .pipe(
        tap(response => {
          this.saveSession(response.token, response.user);
        })
      );
  }

  /**
   * Maneja el callback de OAuth2
   */
  handleOAuthCallback(code: string): Observable<AuthResponse> {
    return this.http.post<AuthResponse>(`${environment.apiUrl}/api/auth/oauth2`, { code })
      .pipe(
        tap(response => {
          this.saveSession(response.token, response.user);
        })
      );
  }

  /**
   * Registro de nuevo usuario
   */
  register(userData: any): Observable<AuthResponse> {
    return this.http.post<AuthResponse>(`${environment.apiUrl}/api/auth/register`, userData)
      .pipe(
        tap(response => {
          this.saveSession(response.token, response.user);
        })
      );
  }

  /**
   * Guarda la sesión en localStorage y actualiza el BehaviorSubject
   */
  private saveSession(token: string, user: User): void {
    localStorage.setItem('token', token);
    localStorage.setItem('user', JSON.stringify(user));
    this.userSubject.next(user);
  }

  /**
   * Limpia la sesión
   */
  private clearSession(): void {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    this.userSubject.next(null);
  }

  /**
   * Logout del usuario
   */
  logout(): void {
    this.clearSession();
    this.router.navigate(['/auth/login']);
  }

  /**
   * Obtiene el token actual
   */
  getToken(): string | null {
    return localStorage.getItem('token');
  }

  /**
   * Verifica si el usuario está autenticado
   */
  isAuthenticated(): boolean {
    return !!this.getToken();
  }

  /**
   * Obtiene el usuario actual
   */
  getUser(): User | null {
    return this.userSubject.value;
  }

  /**
   * Construye la URL de autorización OAuth2 para Google
   */
  getGoogleOAuthUrl(): string {
    return `${environment.apiUrl}/oauth2/authorize/google?redirect_uri=${encodeURIComponent(environment.oauthRedirectUri)}`;
  }
}

// ===== src/app/core/auth/auth.guard.ts =====
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { AuthService } from './services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {

  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): boolean {
    if (this.authService.isAuthenticated()) {
      return true;
    }

    // Redirigir a login con URL de retorno
    const redirectUrl = state.url;
    this.router.navigate(['/auth/login'], {
      queryParams: { redirect: redirectUrl }
    });
    return false;
  }
}

// ===== src/app/core/auth/auth.interceptor.ts =====
import { Injectable } from '@angular/core';
import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AuthService } from './services/auth.service';
import { Router } from '@angular/router';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    // Añadir token si existe
    const token = this.authService.getToken();
    if (token) {
      request = request.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
    }

    return next.handle(request).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401) {
          // Token expirado o inválido
          this.authService.logout();
        }
        return throwError(() => error);
      })
    );
  }
}

// ===== src/app/shared/components/header/header.ts =====
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../../core/auth/services/auth.service';
import { User } from '../../../core/auth/models/user.model';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-header',
  templateUrl: './header.html',
  styleUrls: ['./header.css']
})
export class HeaderComponent implements OnInit {
  user$: Observable<User | null>;
  menuOpen = false;

  constructor(
    private router: Router,
    private authService: AuthService
  ) {
    this.user$ = this.authService.user$;
  }

  ngOnInit(): void {}

  navigateToLogin(): void {
    this.router.navigate(['/auth/login']);
    this.menuOpen = false;
  }

  navigateToRegister(): void {
    this.router.navigate(['/auth/register']);
    this.menuOpen = false;
  }

  logout(): void {
    this.authService.logout();
    this.menuOpen = false;
  }

  toggleMenu(): void {
    this.menuOpen = !this.menuOpen;
  }
}

// ===== src/app/shared/components/header/header.html =====
<header class="header">
  <div class="header-container">
    <div class="brand">
      <a routerLink="/" class="brand-link">OldBaker</a>
    </div>

    <button class="menu-toggle" (click)="toggleMenu()" aria-label="Toggle menu">
      <span></span>
      <span></span>
      <span></span>
    </button>

    <nav class="nav-menu" [class.active]="menuOpen">
      <ng-container *ngIf="(user$ | async) === null; else authenticated">
        <button class="nav-btn" (click)="navigateToLogin()">Iniciar sesión</button>
        <button class="nav-btn primary" (click)="navigateToRegister()">Registrarse</button>
      </ng-container>

      <ng-template #authenticated>
        <span class="user-name">{{ (user$ | async)?.name || (user$ | async)?.email }}</span>
        <button class="nav-btn" (click)="logout()">Cerrar sesión</button>
      </ng-template>
    </nav>
  </div>
</header>

// ===== src/app/shared/components/header/header.css =====
.header {
  background-color: #8B4513;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.header-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 60px;
}

.brand {
  font-size: 24px;
  font-weight: bold;
}

.brand-link {
  color: #FFF8DC;
  text-decoration: none;
  transition: color 0.3s;
}

.brand-link:hover {
  color: #FFE4B5;
}

.menu-toggle {
  display: none;
  flex-direction: column;
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 5px;
}

.menu-toggle span {
  width: 25px;
  height: 3px;
  background-color: #FFF8DC;
  margin: 3px 0;
  transition: 0.3s;
}

.nav-menu {
  display: flex;
  gap: 15px;
  align-items: center;
}

.nav-btn {
  padding: 8px 16px;
  border: 1px solid #FFF8DC;
  background-color: transparent;
  color: #FFF8DC;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s;
  font-size: 14px;
}

.nav-btn:hover {
  background-color: #FFF8DC;
  color: #8B4513;
}

.nav-btn.primary {
  background-color: #FFF8DC;
  color: #8B4513;
}

.nav-btn.primary:hover {
  background-color: #FFE4B5;
}

.user-name {
  color: #FFF8DC;
  margin-right: 10px;
}

/* Responsive */
@media (max-width: 768px) {
  .menu-toggle {
    display: flex;
  }

  .nav-menu {
    position: absolute;
    top: 60px;
    right: -100%;
    width: 100%;
    background-color: #8B4513;
    flex-direction: column;
    padding: 20px;
    transition: right 0.3s;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .nav-menu.active {
    right: 0;
  }

  .nav-btn {
    width: 100%;
    margin: 5px 0;
  }
}

// ===== src/app/features/auth/login/login.ts =====
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { AuthService } from '../../../core/auth/services/auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.html',
  styles: [`
    .login-container {
      max-width: 400px;
      margin: 50px auto;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
      background: white;
    }
    .form-group {
      margin-bottom: 15px;
    }
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
    }
    .form-group input {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }
    .form-group input.error {
      border-color: #dc3545;
    }
    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
    }
    .btn {
      width: 100%;
      padding: 10px;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s;
    }
    .btn-primary {
      background-color: #8B4513;
      color: white;
      margin-bottom: 10px;
    }
    .btn-primary:hover:not(:disabled) {
      background-color: #A0522D;
    }
    .btn-primary:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    .btn-google {
      background-color: #4285f4;
      color: white;
      margin-bottom: 10px;
    }
    .btn-google:hover {
      background-color: #357ae8;
    }
    .divider {
      text-align: center;
      margin: 20px 0;
      position: relative;
    }
    .divider::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      height: 1px;
      background: #ddd;
    }
    .divider span {
      background: white;
      padding: 0 10px;
      position: relative;
    }
    .links {
      text-align: center;
      margin-top: 15px;
    }
    .links a {
      color: #8B4513;
      text-decoration: none;
      font-size: 14px;
    }
    .links a:hover {
      text-decoration: underline;
    }
    .alert {
      padding: 10px;
      border-radius: 4px;
      margin-bottom: 15px;
    }
    .alert-danger {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    .spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid #f3f3f3;
      border-top: 2px solid #8B4513;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-left: 10px;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  `]
})
export class LoginComponent implements OnInit {
  loginForm: FormGroup;
  loading = false;
  error = '';
  redirectUrl = '/';

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  ngOnInit(): void {
    // Verificar si hay código OAuth en query params
    this.route.queryParams.subscribe(params => {
      if (params['code']) {
        this.handleOAuthCallback(params['code']);
      }

      // Guardar URL de redirección si existe y es segura
      if (params['redirect'] && this.isValidRedirect(params['redirect'])) {
        this.redirectUrl = params['redirect'];
      }
    });
  }

  /**
   * Valida que la URL de redirección sea segura (empiece con /)
   */
  private isValidRedirect(url: string): boolean {
    return url.startsWith('/');
  }

  /**
   * Maneja el callback de OAuth2
   */
  private handleOAuthCallback(code: string): void {
    this.loading = true;
    this.error = '';

    this.authService.handleOAuthCallback(code).subscribe({
      next: () => {
        this.router.navigate([this.redirectUrl]);
      },
      error: (err) => {
        this.error = 'Error al autenticar con Google. Por favor intenta de nuevo.';
        this.loading = false;
      }
    });
  }

  /**
   * Envío del formulario de login
   */
  onSubmit(): void {
    if (this.loginForm.invalid) {
      Object.keys(this.loginForm.controls).forEach(key => {
        this.loginForm.get(key)?.markAsTouched();
      });
      return;
    }

    this.loading = true;
    this.error = '';

    this.authService.login(this.loginForm.value).subscribe({
      next: () => {
        this.router.navigate([this.redirectUrl]);
      },
      error: (err) => {
        this.error = err.error?.message || 'Credenciales inválidas';
        this.loading = false;
      }
    });
  }

  /**
   * Login con Google
   */
  loginWithGoogle(): void {
    window.location.href = this.authService.getGoogleOAuthUrl();
  }

  /**
   * Helpers para validación
   */
  isFieldInvalid(field: string): boolean {
    const control = this.loginForm.get(field);
    return !!(control && control.invalid && control.touched);
  }

  getFieldError(field: string): string {
    const control = this.loginForm.get(field);
    if (control?.errors) {
      if (control.errors['required']) return `${field} es requerido`;
      if (control.errors['email']) return 'Email inválido';
      if (control.errors['minlength']) return `Mínimo ${control.errors['minlength'].requiredLength} caracteres`;
    }
    return '';
  }
}

// ===== src/app/features/auth/login/login.html =====
<div class="login-container">
  <h2>Iniciar Sesión</h2>

  <div *ngIf="error" class="alert alert-danger">
    {{ error }}
  </div>

  <form [formGroup]="loginForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="email">Email</label>
      <input
        id="email"
        type="email"
        formControlName="email"
        [class.error]="isFieldInvalid('email')"
        placeholder="tu@email.com">
      <div *ngIf="isFieldInvalid('email')" class="error-message">
        {{ getFieldError('email') }}
      </div>
    </div>

    <div class="form-group">
      <label for="password">Contraseña</label>
      <input
        id="password"
        type="password"
        formControlName="password"
        [class.error]="isFieldInvalid('password')"
        placeholder="••••••••">
      <div *ngIf="isFieldInvalid('password')" class="error-message">
        {{ getFieldError('password') }}
      </div>
    </div>

    <button type="submit" class="btn btn-primary" [disabled]="loading">
      Iniciar Sesión
      <span *ngIf="loading" class="spinner"></span>
    </button>
  </form>

  <div class="divider">
    <span>o</span>
  </div>

  <button type="button" class="btn btn-google" (click)="loginWithGoogle()" [disabled]="loading">
    Iniciar con Google
  </button>

  <div class="links">
    <a routerLink="/auth/forgot">¿Olvidaste tu contraseña?</a>
    <br>
    <span style="font-size: 14px;">¿No tienes cuenta? </span>
    <a routerLink="/auth/register">Regístrate</a>
  </div>
</div>

// ===== src/app/features/auth/register/register.ts =====
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { AuthService } from '../../../core/auth/services/auth.service';

@Component({
  selector: 'app-register',
  templateUrl: './register.html',
  styles: [`
    .register-container {
      max-width: 400px;
      margin: 50px auto;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
      background: white;
    }
    .form-group {
      margin-bottom: 15px;
    }
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
    }
    .form-group input {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }
    .form-group input.error {
      border-color: #dc3545;
    }
    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
    }
    .btn {
      width: 100%;
      padding: 10px;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s;
    }
    .btn-primary {
      background-color: #8B4513;
      color: white;
      margin-bottom: 10px;
    }
    .btn-primary:hover:not(:disabled) {
      background-color: #A0522D;
    }
    .btn-primary:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    .btn-google {
      background-color: #4285f4;
      color: white;
      margin-bottom: 10px;
    }
    .btn-google:hover {
      background-color: #357ae8;
    }
    .divider {
      text-align: center;
      margin: 20px 0;
      position: relative;
    }
    .divider::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      height: 1px;
      background: #ddd;
    }
    .divider span {
      background: white;
      padding: 0 10px;
      position: relative;
    }
    .links {
      text-align: center;
      margin-top: 15px;
    }
    .links a {
      color: #8B4513;
      text-decoration: none;
      font-size: 14px;
    }
    .links a:hover {
      text-decoration: underline;
    }
    .alert {
      padding: 10px;
      border-radius: 4px;
      margin-bottom: 15px;
    }
    .alert-danger {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    .spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid #f3f3f3;
      border-top: 2px solid #8B4513;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-left: 10px;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  `]
})
export class RegisterComponent implements OnInit {
  registerForm: FormGroup;
  loading = false;
  error = '';
  redirectUrl = '/';

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute
  ) {
    this.registerForm = this.fb.group({
      name: ['', [Validators.required]],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      confirmPassword: ['', [Validators.required]]
    }, { validators: this.passwordMatchValidator });
  }

  ngOnInit(): void {
    // Guardar URL de redirección si existe y es segura
    this.route.queryParams.subscribe(params => {
      if (params['redirect'] && this.isValidRedirect(params['redirect'])) {
        this.redirectUrl = params['redirect'];
      }
    });
  }

  /**
   * Validador personalizado para confirmar contraseñas
   */
  passwordMatchValidator(form: FormGroup): any {
    const password = form.get('password');
    const confirmPassword = form.get('confirmPassword');

    if (password && confirmPassword && password.value !== confirmPassword.value) {
      confirmPassword.setErrors({ mismatch: true });
    } else if (confirmPassword?.errors?.['mismatch']) {
      confirmPassword.setErrors(null);
    }
    return null;
  }

  /**
   * Valida que la URL de redirección sea segura
   */
  private isValidRedirect(url: string): boolean {
    return url.startsWith('/');
  }

  /**
   * Envío del formulario de registro
   */
  onSubmit(): void {
    if (this.registerForm.invalid) {
      Object.keys(this.registerForm.controls).forEach(key => {
        this.registerForm.get(key)?.markAsTouched();
      });
      return;
    }

    this.loading = true;
    this.error = '';

    const { confirmPassword, ...userData } = this.registerForm.value;

    // Simulación de registro (placeholder)
    this.authService.register(userData).subscribe({
      next: () => {
        this.router.navigate([this.redirectUrl]);
      },
      error: (err) => {
        this.error = err.error?.message || 'Error al registrar usuario';
        this.loading = false;
      }
    });
  }

  /**
   * Registro con Google
   */
  registerWithGoogle(): void {
    window.location.href = this.authService.getGoogleOAuthUrl();
  }

  /**
   * Helpers para validación
   */
  isFieldInvalid(field: string): boolean {
    const control = this.registerForm.get(field);
    return !!(control && control.invalid && control.touched);
  }

  getFieldError(field: string): string {
    const control = this.registerForm.get(field);
    if (control?.errors) {
      if (control.errors['required']) return `${field} es requerido`;
      if (control.errors['email']) return 'Email inválido';
      if (control.errors['minlength']) return `Mínimo ${control.errors['minlength'].requiredLength} caracteres`;
      if (control.errors['mismatch']) return 'Las contraseñas no coinciden';
    }
    return '';
  }
}

// ===== src/app/features/auth/register/register.html =====
<div class="register-container">
  <h2>Crear Cuenta</h2>

  <div *ngIf="error" class="alert alert-danger">
    {{ error }}
  </div>

  <form [formGroup]="registerForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="name">Nombre</label>
      <input
        id="name"
        type="text"
        formControlName="name"
        [class.error]="isFieldInvalid('name')"
        placeholder="Tu nombre">
      <div *ngIf="isFieldInvalid('name')" class="error-message">
        {{ getFieldError('name') }}
      </div>
    </div>

    <div class="form-group">
      <label for="email">Email</label>
      <input
        id="email"
        type="email"
        formControlName="email"
        [class.error]="isFieldInvalid('email')"
        placeholder="tu@email.com">
      <div *ngIf="isFieldInvalid('email')" class="error-message">
        {{ getFieldError('email') }}
      </div>
    </div>

    <div class="form-group">
      <label for="password">Contraseña</label>
      <input
        id="password"
        type="password"
        formControlName="password"
        [class.error]="isFieldInvalid('password')"
        placeholder="••••••••">
      <div *ngIf="isFieldInvalid('password')" class="error-message">
        {{ getFieldError('password') }}
      </div>
    </div>

    <div class="form-group">
      <label for="confirmPassword">Confirmar Contraseña</label>
      <input
        id="confirmPassword"
        type="password"
        formControlName="confirmPassword"
        [class.error]="isFieldInvalid('confirmPassword')"
        placeholder="••••••••">
      <div *ngIf="isFieldInvalid('confirmPassword')" class="error-message">
        {{ getFieldError('confirmPassword') }}
      </div>
    </div>

    <button type="submit" class="btn btn-primary" [disabled]="loading">
      Registrarse
      <span *ngIf="loading" class="spinner"></span>
    </button>
  </form>

  <div class="divider">
    <span>o</span>
  </div>

  <button type="button" class="btn btn-google" (click)="registerWithGoogle()" [disabled]="loading">
    Registrarse con Google
  </button>

  <div class="links">
    <span style="font-size: 14px;">¿Ya tienes cuenta? </span>
    <a routerLink="/auth/login">Iniciar sesión</a>
  </div>
</div>

// ===== src/environments/environment.ts =====
export const environment = {
  production: false,
  apiUrl: 'http://localhost:8080',
  oauthRedirectUri: 'http://localhost:4200/auth/login'
};

// ===== src/app/app-routing.module.ts =====
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './features/auth/login/login';
import { RegisterComponent } from './features/auth/register/register';
import { AuthGuard } from './core/auth/auth.guard';

const routes: Routes = [
  { path: '', redirectTo: '/home', pathMatch: 'full' },
  { path: 'home', loadChildren: () => import('./app.component').then(m => m.AppComponent) },

  // Auth routes
  { path: 'auth/login', component: LoginComponent },
  { path: 'auth/register', component: RegisterComponent },
  { path: 'auth/forgot', redirectTo: '/auth/login' }, // Placeholder
  { path: 'auth/callback', redirectTo: '/auth/login' }, // OAuth callback maneja en login

  // Protected routes (placeholders)
  {
    path: 'inventory',
    canActivate: [AuthGuard],
    loadChildren: () => import('./app.component').then(m => m.AppComponent)
  },
  {
    path: 'orders',
    canActivate: [AuthGuard],
    loadChildren: () => import('./app.component').then(m => m.AppComponent)
  },
  {
    path: 'tracking',
    canActivate: [AuthGuard],
    loadChildren: () => import('./app.component').then(m => m.AppComponent)
  },

  // Wildcard
  { path: '**', redirectTo: '/home' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

// ===== src/app/app.module.ts =====
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HeaderComponent } from './shared/components/header/header';
import { LoginComponent } from './features/auth/login/login';
import { RegisterComponent } from './features/auth/register/register';
import { AuthInterceptor } from './core/auth/auth.interceptor';

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,
    LoginComponent,
    RegisterComponent
  ],
  imports: [
    BrowserModule,
    CommonModule,
    AppRoutingModule,
    HttpClientModule,
    ReactiveFormsModule
  ],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptor,
      multi: true
    }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

// ===== src/app/app.component.ts =====
import { Component, OnInit } from '@angular/core';
import { AuthService } from './core/auth/services/auth.service';
import { Observable } from 'rxjs';
import { User } from './core/auth/models/user.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styles: [`
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    .welcome-section {
      text-align: center;
      padding: 60px 20px;
      background: linear-gradient(135deg, #8B4513 0%, #A0522D 100%);
      color: white;
      border-radius: 8px;
      margin-top: 20px;
    }
    .welcome-section h1 {
      font-size: 48px;
      margin-bottom: 20px;
    }
    .welcome-section p {
      font-size: 20px;
      opacity: 0.9;
    }
    .features {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-top: 40px;
    }
    .feature-card {
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
      text-align: center;
      transition: transform 0.3s;
    }
    .feature-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .feature-card h3 {
      color: #8B4513;
      margin-bottom: 10px;
    }
  `]
})
export class AppComponent implements OnInit {
  title = 'OldBaker';
  user$: Observable<User | null>;

  constructor(private authService: AuthService) {
    this.user$ = this.authService.user$;
  }

  ngOnInit(): void {}
}

// ===== src/app/app.component.html =====
<app-header></app-header>

<div class="container">
  <div class="welcome-section">
    <h1>Bienvenido a OldBaker</h1>
    <p>Tu panadería de confianza desde 1950</p>
  </div>

  <div class="features">
    <div class="feature-card">
      <h3>🍞 Pan Fresco</h3>
      <p>Horneado diariamente con los mejores ingredientes</p>
    </div>
    <div class="feature-card">
      <h3>📦 Pedidos Online</h3>
      <p>Ordena desde la comodidad de tu hogar</p>
    </div>
    <div class="feature-card">
      <h3>🚚 Entrega a Domicilio</h3>
      <p>Recibe tus productos favoritos en tu puerta</p>
    </div>
    <div class="feature-card">
      <h3>📍 Rastreo en Tiempo Real</h3>
      <p>Sigue tu pedido desde la panadería hasta tu casa</p>
    </div>
  </div>
</div>

<router-outlet></router-outlet>

// ===== README.md =====
# OldBaker - Angular Mini App

## Instalación y Configuración

### Prerrequisitos
- Node.js (v18 o superior)
- Angular CLI v20.2.0

### Pasos de instalación

1. **Crear nuevo proyecto Angular:**
```bash
ng new oldbaker --routing --style=css
cd oldbaker
```

2. **Instalar Angular CLI versión 20.2.0 (si no la tienes):**
```bash
npm install -g @angular/cli@20.2.0
```

3. **Copiar los archivos generados** en la estructura de carpetas indicada.

4. **Instalar dependencias:**
```bash
npm install
```

5. **Configurar el backend:**
   - Edita `src/environments/environment.ts`
   - Actualiza `apiUrl` con la URL de tu backend Spring Boot
   - Actualiza `oauthRedirectUri` con la URL de tu aplicación Angular

6. **Ejecutar la aplicación:**
```bash
ng serve
```

7. **Acceder a la aplicación:**
   - Abre tu navegador en `http://localhost:4200`

## Características implementadas

- ✅ Login con email/password
- ✅ Login con Google OAuth2 (delegado al backend)
- ✅ Registro de usuarios
- ✅ Header responsive
- ✅ Validaciones con Reactive Forms
- ✅ Auth Guard para rutas protegidas
- ✅ Interceptor HTTP para tokens
- ✅ Manejo de sesión con localStorage
- ✅ Redirección después de login

## Notas importantes

- El backend Spring Boot debe estar corriendo en `http://localhost:8080`
- El backend debe manejar las rutas OAuth2:
  - `/oauth2/authorize/google`
  - `/api/auth/oauth2` (para intercambiar código por token)
  - `/api/auth/login` (para login tradicional)
  - `/api/auth/register` (para registro)
- Los tokens JWT se guardan en localStorage
- El flujo OAuth2 se hace en la misma ventana (sin popups)

## Estructura del proyecto

```
src/app/
├── core/           # Servicios, guards, interceptors
├── features/       # Módulos de funcionalidad (auth, inventory, etc.)
├── shared/         # Componentes compartidos (header)
└── environments/   # Configuración de entornos
```

## Desarrollo futuro

Las siguientes características están como placeholders:
- Sistema de inventario
- Gestión de órdenes
- Rastreo de pedidos
- Recuperación de contraseña

## Seguridad

- Las URLs de redirección se validan para prevenir open redirects
- Los tokens se incluyen automáticamente en las peticiones HTTP
- Se maneja la expiración de tokens (401 -> logout)
```
